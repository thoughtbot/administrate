require "administrate/base_dashboard"

class <%= class_name %>Dashboard < Administrate::BaseDashboard
  # ATTRIBUTE_TYPES
  # a hash that describes the type of each of the model's fields.
  #
  # Each different type represents an Administrate::Field object,
  # which determines how the attribute is displayed
  # on pages throughout the dashboard.
  ATTRIBUTE_TYPES = {
<% attributes.each do |attr| -%>
    <%= attr %>: <%= field_type(attr) %>,
<% end -%>
  }.freeze

  # COLLECTION_ATTRIBUTES
  # an array of attributes that will be displayed on the model's index page.
  #
  # By default, it's limited to four items to reduce clutter on index pages.
  # Feel free to add, remove, or rearrange items.
  COLLECTION_ATTRIBUTES = [
<%=
  attributes.first(COLLECTION_ATTRIBUTE_LIMIT).map do |attr|
    "    :#{attr},"
  end.join("\n")
%>
  ].freeze

  # SHOW_PAGE_ATTRIBUTES
  # an array of attributes that will be displayed on the model's show page.
  SHOW_PAGE_ATTRIBUTES = [
<%=
  attributes.map do |attr|
    "    :#{attr},"
  end.join("\n")
%>
  ].freeze

  # FORM_ATTRIBUTES
  # an array of attributes that will be displayed
  # on the model's form (`new` and `edit`) pages.
  FORM_ATTRIBUTES = [
<%=
  form_attributes.map do |attr|
    "    :#{attr},"
  end.join("\n")
%>
  ].freeze

  # Overwrite this method to customize how <%= file_name.pluralize.humanize.downcase %> are displayed
  # across all pages of the admin dashboard.
  #
  # def display_resource(<%= file_name %>)
  #   "<%= class_name %> ##{<%= file_name %>.id}"
  # end

  # COLLECTION_SCOPES
  # an array or hash that define the valid scopes that could be used while
  # serching as part of the query string.
  COLLECTION_SCOPES = [] # Comment to use any scope, but read this text below.
  # If the above COLLECTION_SCOPES definition doesn't exist then any "scope"
  # defined could be used searching *scope:<name_of_the_scope>*. Though this
  # could be a nice feature in applications that has the dashboard access
  # properly secured **this approach is not recommended**. Administrate has
  # no way to know the scopes defined in the model and will send to the model
  # anything not included in its blacklist.
  #
  # When defined buttons will appear in the index header in order to filter the
  # resources displayed. If it's an array it will be treated internally as if
  # it were a hash with a single key called *scopes* pointing to our array. The
  # hash's keys and the scope definitions will be used to show a localized
  # caption for each button using *administrate.scopes.<model_class>* as I18n's
  # scope. If no translation the scope in that model, Administrate'll retry the
  # translation with the scope *administrate.scopes*. That will let us share
  # the same translation between different models (and be DRY!).
  #
  # Definition example with an Arrray:
  #
  #   COLLECTION_SCOPES = [
  #     :opened,
  #     :closed
  #   ]
  #
  # Definition example with a Hash:
  #
  #   COLLECTION_SCOPES = {
  #     status: [:opened, :closed],
  #     headquarters: [:madrid, :oviedo, :mexicodf]
  #   }
  #
  # Scopes with an argument can also be defined. An explicit value for the
  # argument can be defined adding that value after scope name between
  # parenthesis and without quotes. For example:
  #
  #   COLLECTION_SCOPES = {
  #     headquarter: ["office(madrid)", "office(oviedo)", "office(mexicodf)"]
  #   }
  #
  # Will use the scope *office(city)* using "madrid", "oviedo" and "mexicodf"
  # as arguments.
  #
  # Finally, it's possible to let the user indicate the value of the argument
  # as part of the search query adding ":*" after the scope name. For example:
  #
  #   COLLECTION_SCOPES = {
  #     headquarter: ["office(madrid)", "office(oviedo)", "office:*"]
  #   }
  #
  # Won't show any scope button for "office:*" but will let us indicate any
  # value after "office:" to use it as argument for the *office(city)* scope.
  # If our search query is "office:mexicodf" we'll get the same results than
  # clicking in the third button of the previous example (which query would be
  # "scope:office(mexicodf)").
end
